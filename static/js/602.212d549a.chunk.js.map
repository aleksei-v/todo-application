{"version":3,"file":"static/js/602.212d549a.chunk.js","mappings":"mNAEaA,E,QAAYC,GAAAA,EAAH,wC,iDCQhBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACd,SAAC,KAAD,CACIA,KAAMA,EACNC,OAAQ,SAAAC,GAAQ,OAAI,SAACL,EAAD,UAAYK,GAAhB,GAHN,EAMZC,EAASC,EAAAA,KAAaC,MAAM,CAC9BL,KAAMI,EAAAA,KAAaE,WACnBC,MAAOH,EAAAA,KAAaG,QAAQD,WAC5BE,SAAUJ,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIJ,aAGpCK,EAAgB,CAClBX,KAAM,GACNO,MAAO,GACPC,SAAU,IAuCd,EApCwB,WACpB,OAA+BI,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QACbC,GAAWC,EAAAA,EAAAA,MAKjB,OACI,UAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,WACI,8CACA,SAAC,KAAD,CAAQP,cAAeA,EAAeQ,iBAAkBhB,EAAQiB,SAPnD,SAAC,EAAD,GAA0C,IAAxCpB,EAAuC,EAAvCA,KAAMO,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,SAAYa,EAAe,EAAfA,UAC3CN,GAASO,EAAAA,EAAAA,IAAS,CAACtB,KAAAA,EAAMO,MAAAA,EAAOC,SAAAA,KAChCa,GACH,EAIO,UACI,UAAC,KAAD,YACK,0CAEG,SAAC,KAAD,CAAOE,KAAK,OAAOvB,KAAK,UACvB,SAACD,EAAD,CAAWC,KAAK,aAErB,2CAEI,SAAC,KAAD,CAAOuB,KAAK,QAAQvB,KAAK,WACxB,SAACD,EAAD,CAAWC,KAAK,cAGrB,8CAEI,SAAC,KAAD,CAAOuB,KAAK,WAAWvB,KAAK,cAC3B,SAACD,EAAD,CAAWC,KAAK,iBAErB,mBAAQuB,KAAK,SAAb,2BAGNT,GAAWD,IAAa,SAACW,EAAA,EAAD,MAGrC,C","sources":["pages/RegistrationPage/RegistrationPage.styled.jsx","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n    color: red\n`;","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { ErrorText } from './RegistrationPage.styled';\nimport * as yup from 'yup';\nimport { useAuth } from 'hooks/useAuth';\nimport AuthLoader from 'components/Loaders/AuthLoader';\nimport { Box } from 'theme/Box';\n\n\nconst FormError = ({ name }) => (\n    <ErrorMessage\n        name={name}\n        render={messaege => <ErrorText>{messaege}</ErrorText>}\n    />);\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().min(6).max(16).required()\n})\n\nconst initialValues = {\n    name: '',\n    email: '',\n    password: '',\n};\n    \nconst RegistationPage = () => {\n    const { isLoading, isError } = useAuth();\n    const dispatch = useDispatch()\n    const handleSubmit = ({name, email,password}, {resetForm}) => {\n        dispatch(register({name, email, password}))\n        resetForm()\n    }\n    return (\n        <Box p={5}>\n            <h2>Registation Form</h2>\n            <Formik initialValues={initialValues} validationSchema={schema} onSubmit={handleSubmit}>\n                <Form>\n                     <label>\n                        Your name\n                        <Field type=\"text\" name=\"name\" />\n                        {<FormError name='name' />}\n                    </label>\n                    <label>\n                        Your login\n                        <Field type=\"email\" name=\"email\" />\n                        {<FormError name='email' />}\n                    </label>\n\n                    <label>\n                        Your password\n                        <Field type=\"password\" name=\"password\" />\n                        {<FormError name='password' />}\n                    </label>\n                    <button type=\"submit\">Sign up</button>\n                </Form>\n            </Formik>\n            {!isError && isLoading && <AuthLoader />}\n        </Box>\n    )\n};\n\nexport default RegistationPage"],"names":["ErrorText","styled","FormError","name","render","messaege","schema","yup","shape","required","email","password","min","max","initialValues","useAuth","isLoading","isError","dispatch","useDispatch","Box","p","validationSchema","onSubmit","resetForm","register","type","AuthLoader"],"sourceRoot":""}